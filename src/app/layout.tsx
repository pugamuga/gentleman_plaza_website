"use client";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { useEffect, useState } from "react";
import LoaderScreen from "../components/LoaderScreen";
import NavbarNew from "../components/NavbarNew";
import TopHeroNew from "@/components/TopHeroNew";
import Footer from "@/components/Footer";
import { AnimatePresence } from "framer-motion";
import dynamic from "next/dynamic";

const inter = Inter({ subsets: ["latin"] });

const DynamicComponent: any = dynamic(
  () => import("../components/LoaderScreen"),
  {
    // loading: () => <p>Loading...</p>,
    ssr: false,
    // preload: true
  }
);

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [loading, setLoading] = useState(true);
  const [loadingPercentage, setLoadingPercentage] = useState(0);

  // useEffect(() => {
  //   document.body.style.overflowY = "hidden";
  //   const interval = setInterval(() => {
  //     setLoadingPercentage((prev) => (prev < 100 ? prev + 1 : prev));
  //   }, 50);

  //   // Simulate an asynchronous operation (e.g., loading resources)
  //   const fakeAsyncOperation = async () => {
  //     await new Promise((resolve) => setTimeout(resolve, 5000)); // Simulating a 3-second loading time
  //     setLoading(false);
  //     clearInterval(interval);
  //     document.body.style.overflowY = "auto";
  //   };

  //   fakeAsyncOperation();

  //   return () => clearInterval(interval);
  // }, []);

  return (
    <html lang="en">
      <body className={inter.className}>
        {/* <AnimatePresence>
          {loading ? (
            <DynamicComponent loadingPercentage={loadingPercentage} />
          ) : null}
        </AnimatePresence> */}
        <NavbarNew />
        <TopHeroNew />
        {children}
        <Footer />
      </body>
    </html>
  );
}
